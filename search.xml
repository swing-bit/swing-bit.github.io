<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis(12):缓存穿透，缓存击穿和缓存雪崩</title>
      <link href="/2020/082221382.html"/>
      <url>/2020/082221382.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redis缓存穿透和雪崩"><a href="#Redis缓存穿透和雪崩" class="headerlink" title="Redis缓存穿透和雪崩"></a>Redis缓存穿透和雪崩</h1><blockquote><p>服务的高可用问题</p></blockquote><p>Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面。但同时，它也带来了一 些问题。其中，最要害的问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据 的一致性要求很高，那么就不能使用缓存。</p><p>另外的一些典型问题就是，缓存穿透、缓存雪崩和缓存击穿。目前，业界也都有比较流行的解决方案</p><h3 id="缓存穿透（查不到）"><a href="#缓存穿透（查不到）" class="headerlink" title="缓存穿透（查不到）"></a>缓存穿透（查不到）</h3><blockquote><p>概念</p></blockquote><p>缓存穿透的概念很简单，用户想要查询一个数据，发现redis内存数据库没有，也就是缓存没有命中，于 是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中（秒杀！），于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了 缓存穿透。</p><blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vbWFwbGVsZWFmcmVkL3BpY0dvL3Jhdy9tYXN0ZXIvaW1hZ2UtMjAyMDA4MDEyMjU3NDEwNzkucG5n?x-oss-process=image/format,png"></p></blockquote><blockquote><p>解决方案</p></blockquote><p><strong>布隆过滤器</strong></p><p>布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则 丢弃，从而避免了对底层存储系统的查询压力；</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vbWFwbGVsZWFmcmVkL3BpY0dvL3Jhdy9tYXN0ZXIvaW1hZ2UtMjAyMDA4MDEyMjU5MDc4MDMucG5n?x-oss-process=image/format,png"></p><p><strong>缓存空对象</strong></p><p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数 据将会从缓存中获取，保护了后端数据源；</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vbWFwbGVsZWFmcmVkL3BpY0dvL3Jhdy9tYXN0ZXIvaW1hZ2UtMjAyMDA4MDEyMzAyNDM0NTEucG5n?x-oss-process=image/format,png"></p><p>但是这种方法会存在两个问题：</p><ol><li>如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多 的空值的键；</li><li>即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于 需要保持一致性的业务会有影响。</li></ol><h3 id="缓存击穿（量太大，缓存过期！）"><a href="#缓存击穿（量太大，缓存过期！）" class="headerlink" title="缓存击穿（量太大，缓存过期！）"></a>缓存击穿（量太大，缓存过期！）</h3><blockquote><p>概述</p></blockquote><p>这里需要注意和缓存击穿的区别，缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中 对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一 个屏障上凿开了一个洞。</p><p>当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访 问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vbWFwbGVsZWFmcmVkL3BpY0dvL3Jhdy9tYXN0ZXIvaW1hZ2UtMjAyMDA4MDEyMzAzNDU5NTUucG5n?x-oss-process=image/format,png"></p><blockquote><p>解决方案</p></blockquote><p><strong>设置热点数据永不过期</strong></p><p>从缓存层面来看，没有设置过期时间，所以不会出现热点 key 过期后产生的问题。</p><p><strong>加互斥锁</strong></p><p>分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布 式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考 验很大。</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><blockquote><p>概述</p></blockquote><p>缓存雪崩，是指在某一个时间段，缓存集中过期失效。Redis 宕机！</p><p>产生雪崩的原因之一，比如在写本文的时候，马上就要到双十二零点，很快就会迎来一波抢购，这波商 品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都 过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波 峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vbWFwbGVsZWFmcmVkL3BpY0dvL3Jhdy9tYXN0ZXIvaW1hZ2UtMjAyMDA4MDEyMzAzNTk2MTAucG5n?x-oss-process=image/format,png"></p><blockquote><p>解决方案</p></blockquote><p><strong>redis高可用</strong></p><p>这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续 工作，其实就是搭建的集群。（异地多活！）</p><p><strong>限流降级</strong></p><p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对 某个key只允许一个线程查询数据和写缓存，其他线程等待。</p><p><strong>数据预热</strong></p><p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数 据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让 缓存失效的时间点尽量均匀。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis(11):哨兵模式</title>
      <link href="/2020/082254151.html"/>
      <url>/2020/082254151.html</url>
      
        <content type="html"><![CDATA[<h1 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h1><p>（自动选举老大的模式）</p><blockquote><p>概述</p></blockquote><p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工 干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑 哨兵模式。Redis从2.8开始正式提供了Sentinel（哨兵） 架构来解决这个问题。</p><p>谋朝篡位的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</p><p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独 立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p><p>这里的哨兵有两个作用</p><ul><li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。</li><li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服 务器，修改配置文件，让它们切换主机。</li></ul><p>然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。 各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vbWFwbGVsZWFmcmVkL3BpY0dvL3Jhdy9tYXN0ZXIvaW1hZ2UtMjAyMDA4MDEyMjQyMjU2MTIucG5n?x-oss-process=image/format,png"></p><p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认 为主服务器不可用，这个现象成为主观下线。当后面的哨兵也检测到主服务器不可用，并且数量达到一 定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。 切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为 客观下线。</p><blockquote><p>测试</p></blockquote><ol><li>配置哨兵配置文件 sentinel.conf</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># sentinel monitor 被监控的名称 host port 1</span>sentinel monitor myredis 127.0.0.1 6379 1</code></pre><p>后面的这个数字1，代表主机挂了，slave投票看让谁接替成为主机，票数最多的，就会成为主机！</p><ol><li>启动哨兵！</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@kuangshen bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># redis-sentinel kconfig/sentinel.conf</span>26607:X 31 Mar 2020 21:13:10.027 <span class="token comment" spellcheck="true"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span>26607:X 31 Mar 2020 21:13:10.027 <span class="token comment" spellcheck="true"># Redis version=5.0.8, bits=64,</span>commit<span class="token operator">=</span>00000000, modified<span class="token operator">=</span>0, pid<span class="token operator">=</span>26607, just started26607:X 31 Mar 2020 21:13:10.027 <span class="token comment" spellcheck="true"># Configuration loaded</span></code></pre><p>如果Master 节点断开了，这个时候就会从从机中随机选择一个服务器！ （这里面有一个投票算法！）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vbWFwbGVsZWFmcmVkL3BpY0dvL3Jhdy9tYXN0ZXIvaW1hZ2UtMjAyMDA4MDEyMjQ5MTU3MzIucG5n?x-oss-process=image/format,png"></p><p>如果主机此时回来了，只能归并到新的主机下，当做从机，这就是哨兵模式的规则！</p><blockquote><p>哨兵模式</p></blockquote><p>优点：</p><ol><li>哨兵集群，基于主从复制模式，所有的主从配置优点，它全有</li><li>主从可以切换，故障可以转移，系统的可用性就会更好</li><li>哨兵模式就是主从模式的升级，手动到自动，更加健壮！</li></ol><p><strong>缺点：</strong></p><ol><li>Redis 不好在线扩容的，集群容量一旦到达上限，在线扩容就十分麻烦！</li><li>实现哨兵模式的配置其实是很麻烦的，里面有很多选择！</li></ol><blockquote><p>哨兵模式的全部配置！</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Example sentinel.conf</span><span class="token comment" spellcheck="true"># 哨兵sentinel实例运行的端口 默认26379</span>port 26379<span class="token comment" spellcheck="true"># 哨兵sentinel的工作目录</span><span class="token function">dir</span> /tmp<span class="token comment" spellcheck="true"># 哨兵sentinel监控的redis主节点的 ip port</span><span class="token comment" spellcheck="true"># master-name 可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符".-_"组成。</span><span class="token comment" spellcheck="true"># quorum 配置多少个sentinel哨兵统一认为master主节点失联 那么这时客观上认为主节点失联了</span><span class="token comment" spellcheck="true"># sentinel monitor &lt;master-name> &lt;ip> &lt;redis-port> &lt;quorum></span>sentinel monitor mymaster 127.0.0.1 6379 2<span class="token comment" spellcheck="true"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供</span>密码<span class="token comment" spellcheck="true"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span><span class="token comment" spellcheck="true"># sentinel auth-pass &lt;master-name> &lt;password></span>sentinel auth-pass mymaster MySUPER--secret-0123passw0rd<span class="token comment" spellcheck="true"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span><span class="token comment" spellcheck="true"># sentinel down-after-milliseconds &lt;master-name> &lt;milliseconds></span>sentinel down-after-milliseconds mymaster 30000<span class="token comment" spellcheck="true"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span>这个数字越小，完成failover所需的时间就越长，但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。<span class="token comment" spellcheck="true"># sentinel parallel-syncs &lt;master-name> &lt;numslaves></span>sentinel parallel-syncs mymaster 1<span class="token comment" spellcheck="true"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面：</span><span class="token comment" spellcheck="true">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span><span class="token comment" spellcheck="true">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那</span>里同步数据时。<span class="token comment" spellcheck="true">#3.当想要取消一个正在进行的failover所需要的时间。</span><span class="token comment" spellcheck="true">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，</span>slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了<span class="token comment" spellcheck="true"># 默认三分钟</span><span class="token comment" spellcheck="true"># sentinel failover-timeout &lt;master-name> &lt;milliseconds></span>sentinel failover-timeout mymaster 180000<span class="token comment" spellcheck="true"># SCRIPTS EXECUTION</span><span class="token comment" spellcheck="true">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知</span><span class="token comment" spellcheck="true">#相关人员。</span><span class="token comment" spellcheck="true">#对于脚本的运行结果有以下规则：</span><span class="token comment" spellcheck="true">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span><span class="token comment" spellcheck="true">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span><span class="token comment" spellcheck="true">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span><span class="token comment" spellcheck="true">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span><span class="token comment" spellcheck="true">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），</span>将会去调用这个脚本，这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。<span class="token comment" spellcheck="true">#通知脚本</span><span class="token comment" spellcheck="true"># shell编程</span><span class="token comment" spellcheck="true"># sentinel notification-script &lt;master-name> &lt;script-path></span>sentinel notification-script mymaster /var/redis/notify.sh<span class="token comment" spellcheck="true"># 客户端重新配置主节点参数脚本</span><span class="token comment" spellcheck="true"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已</span>经发生改变的信息。<span class="token comment" spellcheck="true"># 以下参数将会在调用脚本时传给脚本:</span><span class="token comment" spellcheck="true"># &lt;master-name> &lt;role> &lt;state> &lt;from-ip> &lt;from-port> &lt;to-ip> &lt;to-port></span><span class="token comment" spellcheck="true"># 目前&lt;state>总是“failover”,</span><span class="token comment" spellcheck="true"># &lt;role>是“leader”或者“observer”中的一个。</span><span class="token comment" spellcheck="true"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通</span>信的<span class="token comment" spellcheck="true"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span><span class="token comment" spellcheck="true"># sentinel client-reconfig-script &lt;master-name> &lt;script-path></span>sentinel client-reconfig-script mymaster /var/redis/reconfig.sh <span class="token comment" spellcheck="true"># 一般都是由运维来配</span>置！</code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis(10):Redis主从复制</title>
      <link href="/2020/082215228.html"/>
      <url>/2020/082215228.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h1><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master)，后者称为从节点(slave)；数据的复制是单向的，只能由主节点到从节点。</p><p>默认情况下，每台Redis服务器都是主节点；且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</p><p><strong>主从复制的作用</strong></p><p>主从复制的作用主要包括：</p><ol><li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li><li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</li><li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</li><li>高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</li></ol><p>一般来说，要将Redis运用于工程项目中，只使用一台Redis是万万不能的（宕机），原因如下：</p><p>1、从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较 大；</p><p>2、从容量上，单个Redis服务器内存容量有限，就算一台Redis服务器内存容量为256G，也不能将所有 内存用作Redis存储内存，一般来说，单台Redis最大使用内存不应该超过20G。 电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是”多读少写”。 对于这种场景，我们可以使如下这种架构：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vbWFwbGVsZWFmcmVkL3BpY0dvL3Jhdy9tYXN0ZXIvaW1hZ2UtMjAyMDA4MDEyMjE3MjY0NDIucG5n?x-oss-process=image/format,png"></p><p>主从复制，读写分离！ 80% 的情况下都是在进行读操作！减缓服务器的压力！架构中经常使用！ 一主 二从！</p><p>只要在公司中，主从复制就是必须要使用的，因为在真实的项目中不可能单机使用Redis！</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>只配置从库，不用配置主库！</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> info replication <span class="token comment" spellcheck="true"># 查看当前库的信息</span><span class="token comment" spellcheck="true"># Replication</span>role:master <span class="token comment" spellcheck="true"># 角色 master</span>connected_slaves:0 <span class="token comment" spellcheck="true"># 没有从机</span>master_replid:b63c90e6c501143759cb0e7f450bd1eb0c70882amaster_replid2:0000000000000000000000000000000000000000master_repl_offset:0second_repl_offset:-1repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0</code></pre><p>复制3个配置文件，然后修改对应的信息</p><ol><li>端口</li><li>pid 名字</li><li>log文件名字</li><li>dump.rdb 名字</li></ol><h3 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a>一主二从</h3><p>默认情况下，每台Redis服务器都是主节点； 我们一般情况下只用配置从机就好了！ 认老大！ 一主 （79）二从（80，81）</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6380<span class="token operator">></span> SLAVEOF 127.0.0.1 6379 <span class="token comment" spellcheck="true"># SLAVEOF host 6379 找谁当自己的老大！</span>OK127.0.0.1:6380<span class="token operator">></span> info replication<span class="token comment" spellcheck="true"># Replication</span>role:slave <span class="token comment" spellcheck="true"># 当前角色是从机</span>master_host:127.0.0.1 <span class="token comment" spellcheck="true"># 可以的看到主机的信息</span>master_port:6379master_link_status:upmaster_last_io_seconds_ago:3master_sync_in_progress:0slave_repl_offset:14slave_priority:100slave_read_only:1connected_slaves:0master_replid:a81be8dd257636b2d3e7a9f595e69d73ff03774emaster_replid2:0000000000000000000000000000000000000000master_repl_offset:14second_repl_offset:-1repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:1repl_backlog_histlen:14<span class="token comment" spellcheck="true"># 在主机中查看！</span>127.0.0.1:6379<span class="token operator">></span> info replication<span class="token comment" spellcheck="true"># Replication</span>role:masterconnected_slaves:1 <span class="token comment" spellcheck="true"># 多了从机的配置</span>slave0:ip<span class="token operator">=</span>127.0.0.1,port<span class="token operator">=</span>6380,state<span class="token operator">=</span>online,offset<span class="token operator">=</span>42,lag<span class="token operator">=</span>1 <span class="token comment" spellcheck="true"># 多了从机的配置</span>master_replid:a81be8dd257636b2d3e7a9f595e69d73ff03774emaster_replid2:0000000000000000000000000000000000000000master_repl_offset:42second_repl_offset:-1repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:1repl_backlog_histlen:42</code></pre><p>如果两个都配置完了，就是两个从机的</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vbWFwbGVsZWFmcmVkL3BpY0dvL3Jhdy9tYXN0ZXIvaW1hZ2UtMjAyMDA4MDEyMjMwMzI4NjUucG5n?x-oss-process=image/format,png"></p><p>真实的从主配置应该在配置文件中配置，这样的话是永久的，我们这里使用的是命令，暂时的！</p><blockquote><p>细节</p></blockquote><p>主机可以写，从机不能写只能读！主机中的所有信息和数据，都会自动被从机保存！</p><p>主机写：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vbWFwbGVsZWFmcmVkL3BpY0dvL3Jhdy9tYXN0ZXIvaW1hZ2UtMjAyMDA4MDEyMjMyNDcyNzAucG5n?x-oss-process=image/format,png"></p><p>从机只能读取内容</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vbWFwbGVsZWFmcmVkL3BpY0dvL3Jhdy9tYXN0ZXIvaW1hZ2UtMjAyMDA4MDEyMjMyMzcxNTcucG5n?x-oss-process=image/format,png"></p><p>测试：主机断开连接，从机依旧连接到主机的，但是没有写操作，这个时候，主机如果回来了，从机依 旧可以直接获取到主机写的信息！</p><p>如果是使用命令行，来配置的主从，这个时候如果重启了，就会变回主机！只要变为从机，立马就会从 主机中获取值！</p><blockquote><p>复制原理</p></blockquote><p>Slave 启动成功连接到 master 后会发送一个sync同步命令</p><p>Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行 完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。</p><p>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</p><p>增量复制：Master 继续将新的所有收集到的修改命令依次传给slave，完成同步 但是只要是重新连接master，一次完全同步（全量复制）将被自动执行！ 我们的数据一定可以在从机中 看到！</p><blockquote><p>层层链路</p></blockquote><p>上一个M链接下一个 S！</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vbWFwbGVsZWFmcmVkL3BpY0dvL3Jhdy9tYXN0ZXIvaW1hZ2UtMjAyMDA4MDEyMjM4MzQ0NDgucG5n?x-oss-process=image/format,png"></p><p>这时候也可以完成我们的主从复制！</p><blockquote><p>如果没有老大了，这个时候能不能选择一个老大出来呢？ 手动！</p></blockquote><p>如果主机断开了连接，我们可以使用 SLAVEOF no one 让自己变成主机！其他的节点就可以手动连 接到最新的这个主节点（手动）！如果这个时候老大修复了，那就重新连接！</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis(9):Redis发布订阅</title>
      <link href="/2020/082260721.html"/>
      <url>/2020/082260721.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h1><p>Redis提供了发布订阅功能，可以用于消息的传输，Redis的发布订阅机制包括三个部分，发布者，订阅者和Channel。 </p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNDE1MTUzOTQxMTIz?x-oss-process=image/format,png"></p><blockquote><p>命令</p></blockquote><p>这些命令被广泛用于构建即时通信应用，比如网络聊天室(chatroom)和实时广播、实时提醒等。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vbWFwbGVsZWFmcmVkL3BpY0dvL3Jhdy9tYXN0ZXIvaW1hZ2UtMjAyMDA4MDEyMjEwNTM1MTcucG5n?x-oss-process=image/format,png"></p><blockquote><p>原理</p></blockquote><p>Redis是使用C实现的，通过分析 Redis 源码里的 pubsub.c 文件，了解发布和订阅机制的底层实现，籍此加深对 Redis 的理解</p><p>Redis 通过 PUBLISH 、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能。</p><p>通过 SUBSCRIBE 命令订阅某频道后，redis-server 里维护了一个字典，字典的键就是一个个 频道！， 而字典的值则是一个链表，链表中保存了所有订阅这个 channel 的客户端。SUBSCRIBE 命令的关键， 就是将客户端添加到给定 channel 的订阅链表中。</p><p>通过 PUBLISH 命令向订阅者发送消息，redis-server 会使用给定的频道作为键，在它所维护的 channel 字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p><p>Pub/Sub 从字面上理解就是发布（Publish）与订阅（Subscribe），在Redis中，你可以设定对某一个 key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应 的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</p><p><strong>使用场景：</strong></p><ol><li>实时消息系统！</li><li>实时聊天！（频道当做聊天室，将信息回显给所有人即可！）</li><li>订阅，关注系统都是可以的！ 稍微复杂的场景我们就会使用 消息中间件 MQ</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis(8):Redis持久化</title>
      <link href="/2020/082249195.html"/>
      <url>/2020/082249195.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1><p>Redis是内存数据库，如果不将内存中的数据库状态保存到磁盘中，那么一旦服务器进程退出，服务器中的数据库状态也会小时，所以Redis提供了持久化功能！</p><h2 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h2><blockquote><p>什么是RDB</p></blockquote><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是Snapshot快照，它恢复时是将快照文件直接读到内存里。</p><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，在持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的搞笑。RDB的缺点就是最后一次持久化的数据可能丢失。</p><p>rdb保存的是dump.rdb文件，配置文件中快照位置进行配置rdb规则</p><blockquote><p>触发机制</p></blockquote><p>1、save的规则满足的情况下，会自动触发rdb规则。</p><p>2、执行flushall命令也会触发rdb规则！</p><p>3、退出Redis，也会产生rdb文件！</p><blockquote><p>如何恢复rdb文件</p></blockquote><p>1、只需要将rdb文件放在redis启动目录即可，redis启动时会自动检查dump.rdb，恢复其中的数据</p><p>2、查看需要存在的位置</p><pre><code>config get dir</code></pre><p>优点：<br> 1.采用子线程创建RDB文件，不会对redis服务器性能造成大的影响；<br> 2.快照生成的RDB文件是一种压缩的二进制文件，可以方便的在网络中传输和保存。通过RDB文件，可以方便的将redis数据恢复到某一历史时刻，可以提高数据安全性，避免宕机等意外对数据的影响。</p><p>缺点：<br> 1.在redis文件在时间点A生成，之后产生了新数据，还未到达另一次生成RDB文件的条件，redis服务器崩溃了，那么在时间点A之后的数据会丢失掉，数据一致性不是完美的好，如果可以接受这部分丢失的数据，可以用生成RDB的方式；<br> 2.快照持久化方法通过调用fork()方法创建子线程。当redis内存的数据量比较大时，创建子线程和生成RDB文件会占用大量的系统资源和处理时间，对 redis处理正常的客户端请求造成较大影响。</p><h2 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h2><p>将所有命令都记录下来，恢复的时候就把这个文件全部执行一遍</p><p>以日志的形式记录每个写操作，将Redis执行过的所有命令记录下来（读操作不记录），只许追加文件但不可以改写文件，Redis启动之初会读取该文件重新构建数据，换言之，Redis重启的话久耕具日志文件的内容将写指令重新执行一遍以完成数据的恢复工作。</p><p>AOF保存的时appendonly.aof文件</p><pre class=" language-bash"><code class="language-bash">appendonly no        <span class="token comment" spellcheck="true"># 默认是不开启的</span></code></pre><p>如果这个aof文件有错位，这时候redis是启动不起来的</p><pre class=" language-bash"><code class="language-bash">redis-check-aof   <span class="token comment" spellcheck="true"># 修复aof文件</span></code></pre><blockquote><p>优点和缺点</p></blockquote><p>优点：<br> 1.提供了多种同步命令的方式，默认1秒同步一次写命令，最多丢失1秒内的数据；<br> 2.如果AOF文件有错误，比如在写AOF文件时redis崩溃了，redis提供了多种恢复AOF文件的方式，例如使用redis-check-aof工具修正AOF文件（一般都是最后一条写命令有问题，可以手动取出最后一条写命令）；<br> 3.AOF文件可读性交强，也可手动操作写命令。<br> 缺点：<br> 1.AOF文件比RDB文件较大；<br> 2.redis负载较高时，RDB文件比AOF文件具有更好的性能；<br> 3.RDB使用快照的方式持久化整个redis数据，而aof只是追加写命令，因此从理论上来说，RDB比AOF方式更加健壮，另外，官方文档也指出，在某些情况下，AOF的确也存在一些bug，比如使用阻塞命令时，这些bug的场景RDB是不存在的。</p><blockquote><p>重写</p></blockquote><p>redis不断的将写命令保存到AOF文件中，导致AOF文件越来越大，当AOF文件体积过大时，数据恢复的时间也是非常长的，因此，redis提供了重写或者说压缩AOF文件的功能。比如对key1初始值是0，调用incr命,100次，key1的值变为100，那么其实直接一句set key1 100 就可以顶之前的100局调用，AOF重写功能就是干这个事情的。<br> 重写时，可以调用BGREWRITEAOF命令重写AOF文件，与新建子线程bgsave命令的工作原理相似。也可以通过配置文件配置什么条件下对AOF文件重写。</p><pre class=" language-bash"><code class="language-bash">auto-aof-rewrite-percentage 100 <span class="token comment" spellcheck="true">#当前AOF文件大小和上一次重写时AOF文件大小的比值</span>auto-aof-rewrite-min-size 64mb  <span class="token comment" spellcheck="true">#文件的最小体积</span></code></pre><p>重写步骤:<br> 1.创建子进程进行AOF重写<br> 2.将客户端的写命令追加到AOF重写缓冲区<br> 3.子进程完成AOF重写工作后，会向父进程发送一个信号<br> 4.父进程接收到信号后，将AOF重写缓冲区的所有内容写入到新AOF文件中<br> 5.对新的AOF文件进行改名，原子的覆盖现有的AOF文件</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis(7):Redis.conf详解</title>
      <link href="/2020/082264587.html"/>
      <url>/2020/082264587.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-conf详解"><a href="#Redis-conf详解" class="headerlink" title="Redis.conf详解"></a>Redis.conf详解</h1><p><img src="https://img-blog.csdnimg.cn/20200822103805276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjYyMjgwNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>1、配置文件 unit单位对大小写不敏感</p><blockquote><p>包含</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200822103855530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjYyMjgwNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>可以包含多个配置文件</p><blockquote><p>网络</p></blockquote><pre class=" language-bash"><code class="language-bash">bind 127.0.0.1        <span class="token comment" spellcheck="true">#绑定的ip</span>protected-mode <span class="token function">yes</span>    <span class="token comment" spellcheck="true">#保护模式</span>port 6379            <span class="token comment" spellcheck="true"># 端口设置</span></code></pre><blockquote><p>通用</p></blockquote><pre class=" language-bash"><code class="language-bash">daemonize <span class="token function">yes</span>            <span class="token comment" spellcheck="true">#以守护进程的方式运行，默认为no，需要自己开启</span>pidfile /var/run/redis_6379.pid            <span class="token comment" spellcheck="true">#如果以后台的方式运行，需要指定一个pid文件</span><span class="token comment" spellcheck="true"># 日志</span><span class="token comment" spellcheck="true"># Specify the server verbosity level.</span><span class="token comment" spellcheck="true"># This can be one of:</span><span class="token comment" spellcheck="true"># debug (a lot of information, useful for development/testing)</span><span class="token comment" spellcheck="true"># verbose (many rarely useful info, but not a mess like the debug level)</span><span class="token comment" spellcheck="true"># notice (moderately verbose, what you want in production probably)</span><span class="token comment" spellcheck="true"># warning (only very important / critical messages are logged)</span>loglevel noticelogfile <span class="token string">""</span>        <span class="token comment" spellcheck="true">#日志的文件位置名</span>databases 16        <span class="token comment" spellcheck="true">#默认的数据库数量</span>always-show-logo <span class="token function">yes</span>        <span class="token comment" spellcheck="true">#是否总是显示logo</span></code></pre><blockquote><p>快照</p></blockquote><p>持久化，在规定的时间内，执行了多少次操作，则会持久化到.rdb.aof</p><p>Redis是内存数据库，如果没有持久化，那么数据断电即失</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 如果900s内，如果至少有1个key进行了修改，我们就进行持久化操作</span>save 900 1            <span class="token comment" spellcheck="true"># 如果300s内，如果至少有10个key进行了修改，我们就进行持久化操作</span>save 300 10<span class="token comment" spellcheck="true"># 如果60s内，如果至少有10000个key进行了修改，我们就进行持久化操作</span>save 60 10000<span class="token comment" spellcheck="true"># 持久化如果出错，是否还继续工作</span>stop-writes-on-bgsave-error <span class="token function">yes</span><span class="token comment" spellcheck="true"># 是否压缩rdb文件，需要消耗CPU资源</span>rdbcompression <span class="token function">yes</span><span class="token comment" spellcheck="true"># 保存rdb文件时，进行错误的检查校验</span>rdbchecksum <span class="token function">yes</span><span class="token comment" spellcheck="true"># rdb文件保存的目录</span><span class="token function">dir</span> ./</code></pre><blockquote><p>安全</p></blockquote><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> config get requirepass1<span class="token punctuation">)</span> <span class="token string">"requirepass"</span>2<span class="token punctuation">)</span> <span class="token string">""</span>127.0.0.1:6379<span class="token operator">></span> config <span class="token keyword">set</span> requirepass <span class="token string">"123456"</span>        <span class="token comment" spellcheck="true">#设置密码</span>OK127.0.0.1:6379<span class="token operator">></span> config get requirepass1<span class="token punctuation">)</span> <span class="token string">"requirepass"</span>2<span class="token punctuation">)</span> <span class="token string">"123456"</span></code></pre><blockquote><p>限制</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 设置能连接上redis的最大客户端的数量</span>maxclients 10000        <span class="token comment" spellcheck="true"># redis配置最大的内存容量</span>maxmemory <span class="token operator">&lt;</span>bytes<span class="token operator">></span><span class="token comment" spellcheck="true"># 内存到达上限之后的处理策略</span>maxmemory-policy noeviction1.volatile-lru：只对设置了过期时间的key进行LRU（默认值） 2.allkeys-lru ： 删除lru算法的key   3.volatile-random：随机删除即将过期key   4.allkeys-random：随机删除   5.volatile-ttl ： 删除即将过期的   6.noeviction ： 永不过期，返回错误  </code></pre><blockquote><p>APPEND ONLY MODE </p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 默认时不开启aof模式的，默认时使用rdb方式持久化的，在大部分的情况下，rdb完全够用！</span>appendonly no<span class="token comment" spellcheck="true"># 持久化的文件的名字</span>appendfilename <span class="token string">"appendonly.aof"</span><span class="token comment" spellcheck="true"># appendfsync always        # 每次修改都会sync，消耗性能</span>appendfsync everysec        <span class="token comment" spellcheck="true"># 每秒执行一次sync，可能会丢失这1s的数据</span><span class="token comment" spellcheck="true"># appendfsync no            # 不执行sync，这个时候操作系统会自己同步数据，速度最快</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis(6):Jedis</title>
      <link href="/2020/08223812.html"/>
      <url>/2020/08223812.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><blockquote><p>Jedis是Redis官方推荐的java连接开发工具！使用java操作Redis中间件</p></blockquote><p>1、导入jar包</p><pre><code>&lt;dependencies&gt;&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;    &lt;dependency&gt;        &lt;groupId&gt;redis.clients&lt;/groupId&gt;        &lt;artifactId&gt;jedis&lt;/artifactId&gt;        &lt;version&gt;3.2.0&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;        &lt;artifactId&gt;fastjson&lt;/artifactId&gt;        &lt;version&gt;1.2.62&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><p>2、测试编码：</p><ul><li>连接数据库</li><li>操作命令</li><li>断开连接</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lht<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPing</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//jedis的方法和命令行的命令一样</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>输出：PONG</code></pre><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lht<span class="token punctuation">.</span>base<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestKey</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"清空数据："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断某个键是否存在："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增&lt;'username','kuangshen'>的键值对："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"kuangshen"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增&lt;'password','password'>的键值对："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"系统中所有的键如下："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keys <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除键password:"</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断键password是否存在："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查看键username所存储的值的类型："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"随机返回key空间的一个："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">randomKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重命名key："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取出改后的name："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"按索引查询："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除当前选择数据库中的所有key："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回当前数据库中key的数目："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">dbSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除所有数据库中的所有key："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">flushAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="对String操作"><a href="#对String操作" class="headerlink" title="对String操作"></a>对String操作</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lht<span class="token punctuation">.</span>base<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestString</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========增加数据==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span><span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">,</span> <span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除键key2:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取键key2:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改key1:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1Changed"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取key1的值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在key3后面加入值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">,</span> <span class="token string">"End"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key3的值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">mset</span><span class="token punctuation">(</span><span class="token string">"key01"</span><span class="token punctuation">,</span><span class="token string">"value01"</span><span class="token punctuation">,</span><span class="token string">"key02"</span><span class="token punctuation">,</span><span class="token string">"value02"</span><span class="token punctuation">,</span><span class="token string">"key03"</span><span class="token punctuation">,</span><span class="token string">"value03"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">mget</span><span class="token punctuation">(</span><span class="token string">"key01"</span><span class="token punctuation">,</span><span class="token string">"key02"</span><span class="token punctuation">,</span><span class="token string">"key03"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">mget</span><span class="token punctuation">(</span><span class="token string">"key01"</span><span class="token punctuation">,</span><span class="token string">"key02"</span><span class="token punctuation">,</span><span class="token string">"key03"</span><span class="token punctuation">,</span><span class="token string">"key04"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"key01"</span><span class="token punctuation">,</span><span class="token string">"key02"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">mget</span><span class="token punctuation">(</span><span class="token string">"key01"</span><span class="token punctuation">,</span><span class="token string">"key02"</span><span class="token punctuation">,</span><span class="token string">"key03"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========新增键值对防止覆盖原先值=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2-new"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========新增键值对并设置有效时间============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========获取原值，更新为新值=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">getSet</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"key2GetSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得key2的值的字串："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">getrange</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="对List操作"><a href="#对List操作" class="headerlink" title="对List操作"></a>对List操作</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//对List操作</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>lht<span class="token punctuation">.</span>base<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestList</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========添加一个list==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token string">"ArrayList"</span><span class="token punctuation">,</span> <span class="token string">"Vector"</span><span class="token punctuation">,</span> <span class="token string">"Stack"</span><span class="token punctuation">,</span> <span class="token string">"HashMap"</span><span class="token punctuation">,</span> <span class="token string">"WeakHashMap"</span><span class="token punctuation">,</span> <span class="token string">"LinkedHashMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token string">"HashSet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token string">"TreeSet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token string">"TreeMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1代表倒数第一个元素，-2代表倒数第二个元素,end为-1表示查询全部</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections区间0-3的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除列表指定的值 ，第二个参数为删除的个数（有重复时），后add进去的值先被删，类似于出栈</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除指定元素个数："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrem</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"HashMap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除下表0-3区间之外的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">ltrim</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections列表出栈（左端）："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lpop</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections添加元素，从列表右端，与lpush相对应："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">rpush</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token string">"EnumMap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections列表出栈（右端）："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">rpop</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改collections指定下标1的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lset</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"LinkedArrayList"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的内容："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"collections的长度："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">llen</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取collections下标为2的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lindex</span><span class="token punctuation">(</span><span class="token string">"collections"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"sortedList"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sortedList排序前："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"sortedList"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token string">"sortedList"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sortedList排序后："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"sortedList"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="对Set操作"><a href="#对Set操作" class="headerlink" title="对Set操作"></a>对Set操作</h2><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//对Set操作</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>lht<span class="token punctuation">.</span>base<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============向集合中添加元素（不重复）============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e1"</span><span class="token punctuation">,</span><span class="token string">"e2"</span><span class="token punctuation">,</span><span class="token string">"e4"</span><span class="token punctuation">,</span><span class="token string">"e3"</span><span class="token punctuation">,</span><span class="token string">"e0"</span><span class="token punctuation">,</span><span class="token string">"e8"</span><span class="token punctuation">,</span><span class="token string">"e7"</span><span class="token punctuation">,</span><span class="token string">"e5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet的所有元素为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除一个元素e0："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">srem</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet的所有元素为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除两个元素e7和e6："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">srem</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e7"</span><span class="token punctuation">,</span><span class="token string">"e6"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet的所有元素为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"随机的移除集合中的一个元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">spop</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"随机的移除集合中的一个元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">spop</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet的所有元素为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet中包含元素的个数："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">scard</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e3是否在eleSet中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sismember</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e1是否在eleSet中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sismember</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e1是否在eleSet中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sismember</span><span class="token punctuation">(</span><span class="token string">"eleSet"</span><span class="token punctuation">,</span> <span class="token string">"e5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span> <span class="token string">"e1"</span><span class="token punctuation">,</span><span class="token string">"e2"</span><span class="token punctuation">,</span><span class="token string">"e4"</span><span class="token punctuation">,</span><span class="token string">"e3"</span><span class="token punctuation">,</span><span class="token string">"e0"</span><span class="token punctuation">,</span><span class="token string">"e8"</span><span class="token punctuation">,</span><span class="token string">"e7"</span><span class="token punctuation">,</span><span class="token string">"e5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"eleSet2"</span><span class="token punctuation">,</span> <span class="token string">"e1"</span><span class="token punctuation">,</span><span class="token string">"e2"</span><span class="token punctuation">,</span><span class="token string">"e4"</span><span class="token punctuation">,</span><span class="token string">"e3"</span><span class="token punctuation">,</span><span class="token string">"e0"</span><span class="token punctuation">,</span><span class="token string">"e8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将eleSet1中删除e1并存入eleSet3中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smove</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span> <span class="token string">"eleSet3"</span><span class="token punctuation">,</span> <span class="token string">"e1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//移到集合元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将eleSet1中删除e2并存入eleSet3中："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smove</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span> <span class="token string">"eleSet3"</span><span class="token punctuation">,</span> <span class="token string">"e2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet1中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet3中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============集合运算================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet1中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet2中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet1和eleSet2的交集:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sinter</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet1和eleSet2的并集:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sunion</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet1和eleSet2的差集:"</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">sdiff</span><span class="token punctuation">(</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//eleSet1中有，eleSet2中没有</span>        jedis<span class="token punctuation">.</span><span class="token function">sinterstore</span><span class="token punctuation">(</span><span class="token string">"eleSet4"</span><span class="token punctuation">,</span><span class="token string">"eleSet1"</span><span class="token punctuation">,</span><span class="token string">"eleSet2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求交集并将交集保存到dstkey的集合</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eleSet4中的元素："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"eleSet4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="对Hash操作"><a href="#对Hash操作" class="headerlink" title="对Hash操作"></a>对Hash操作</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//对Hash操作</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>lht<span class="token punctuation">.</span>base<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHash</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span><span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">,</span><span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key4"</span><span class="token punctuation">,</span><span class="token string">"value4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加名称为hash（key）的hash元素</span>        jedis<span class="token punctuation">.</span><span class="token function">hmset</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//向名称为hash的hash中添加key为key5，value为value5元素</span>        jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span> <span class="token string">"key5"</span><span class="token punctuation">,</span> <span class="token string">"value5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键值对为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//return Map&lt;String,String></span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hkeys</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//return Set&lt;String></span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有值为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hvals</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//return List&lt;String></span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将key6保存的值加上一个整数，如果key6不存在则添加key6："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hincrBy</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span> <span class="token string">"key6"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键值对为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将key6保存的值加上一个整数，如果key6不存在则添加key6："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hincrBy</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span> <span class="token string">"key6"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键值对为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除一个或者多个键值对："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hdel</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash的所有键值对为："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"散列hash中键值对的个数："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hlen</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断hash中是否存在key2："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hexists</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断hash中是否存在key3："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hexists</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取hash中的值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hmget</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取hash中的值："</span><span class="token operator">+</span>jedis<span class="token punctuation">.</span><span class="token function">hmget</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"key3"</span><span class="token punctuation">,</span><span class="token string">"key4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis(5):事务</title>
      <link href="/2020/082212768.html"/>
      <url>/2020/082212768.html</url>
      
        <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>Redis事务本质：一组命令的集合！一个事务中的所有命令都会被序列化，在事务执行过程中，会按照顺序执行！</p><p>一次性！顺序性！排他性！</p><p>Redis事务没有隔离级别的概念！</p><p>所有的命令在事务中，并没有直接被执行!只有发起执行命令的时候才会执行</p><p>Redis的单条命令是保证原子性的，但事务不保证原子性！</p><p>Redis的事务：</p><ul><li>开启事务（multi）</li><li>命令入队（….）</li><li>执行事务（exec）</li></ul><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 v1QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k2 v2QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k3 v3QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span>        <span class="token comment" spellcheck="true">#执行事务</span>1<span class="token punctuation">)</span> OK2<span class="token punctuation">)</span> OK3<span class="token punctuation">)</span> OK127.0.0.1:6379<span class="token operator">></span> DISCARD        <span class="token comment" spellcheck="true">#放弃事务</span>OK</code></pre><blockquote><p>编译时异常（代码有问题，命令有错）事务中所有的命令都不会执行！</p></blockquote><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> getset k3<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR wrong number of arguments <span class="token keyword">for</span> <span class="token string">'getset'</span> <span class="token function">command</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 helloQUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k2 worldQUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> EXECABORT Transaction discarded because of previous errors.</code></pre><blockquote><p>运行时异常，如果事务队列中存在语法性错误，那么执行命令的时候，其他命令是可以正常执行的，错误命令抛出异常！</p></blockquote><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 helloOK127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> INCR k1QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k2 worldQUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k3 javaQUEUED127.0.0.1:6379<span class="token operator">></span> get k3QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span>1<span class="token punctuation">)</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range2<span class="token punctuation">)</span> OK3<span class="token punctuation">)</span> OK4<span class="token punctuation">)</span> <span class="token string">"java"</span></code></pre><blockquote><p>监控</p></blockquote><p>悲观锁</p><ul><li>很悲观，认为什么时候都会出问题，无论做什么都会加锁</li></ul><p>乐观锁</p><ul><li>很乐观，认为什么时候都不会出现问题，所以不会加锁！更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li></ul><p>mysql：</p><ul><li>获取version</li><li>更新的时候比较version</li></ul><blockquote><p>Redis监测测试</p></blockquote><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> money 100OK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> out 0OK127.0.0.1:6379<span class="token operator">></span> <span class="token function">watch</span> money        <span class="token comment" spellcheck="true">#监视money</span>OK127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> DECRBY money 20QUEUED127.0.0.1:6379<span class="token operator">></span> INCRBY out 20QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span>    <span class="token comment" spellcheck="true">#正常结束事务</span>1<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 80</code></pre><p>多线程修改值测试，使用watch可以当作Redis的乐观锁操作</p><pre><code>127.0.0.1:6379&gt; watch moneyOK127.0.0.1:6379&gt; get money&quot;80&quot;127.0.0.1:6379&gt; multiOK127.0.0.1:6379&gt; decrby money 20QUEUED127.0.0.1:6379&gt; incrby out 20QUEUED127.0.0.1:6379&gt; exec(nil)</code></pre><p>如果修改失败，先解锁，再获取最新的值</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis(4):三种特殊数据类型</title>
      <link href="/2020/082253624.html"/>
      <url>/2020/082253624.html</url>
      
        <content type="html"><![CDATA[<h1 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h1><h2 id="geospatial-（地理位置）"><a href="#geospatial-（地理位置）" class="headerlink" title="geospatial （地理位置）"></a>geospatial （地理位置）</h2><p>附近的人：（获取所有附近人的地址，定位），通过半径查询</p><blockquote><p>geo 底层的实现原理其实就是Zset！我们可以使用Zset命令来操作geo</p></blockquote><h2 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h2><blockquote><p>基数</p></blockquote><p>一个集合{1，3，4，5，7，8} </p><p>不重复的元素个数==》基数 = 5，可以接受误差</p><blockquote><p>简介</p></blockquote><p>Redis2.8.9版本就更新了Hyperloglog数据结构</p><p>Redis Hyperloglog 技术统计的算法</p><p>网页的UV（一个人访问一个网站多次，但还是算作一个人！）</p><p>传统的方式，set保存用户的id，然后就统计set中的元素数量作为判断</p><h2 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h2><blockquote><p>位存储</p></blockquote><p>统计用户信息，活跃，不活跃！登录、未登录！打卡，365打卡！</p><p>Bitmaps 位图，数据结构!都是操作二进制位进行记录，就只有0和1两个状态！</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis(3):五大数据类型</title>
      <link href="/2020/08225379.html"/>
      <url>/2020/08225379.html</url>
      
        <content type="html"><![CDATA[<h1 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h1><blockquote><p>官网引用</p></blockquote><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings">字符串（strings）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes">散列（hashes）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists">列表（lists）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets">集合（sets）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets">有序集合（sorted sets）</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html">复制（replication）</a>，<a href="http://www.redis.cn/commands/eval.html">LUA脚本（Lua scripting）</a>， <a href="http://www.redis.cn/topics/lru-cache.html">LRU驱动事件（LRU eviction）</a>，<a href="http://www.redis.cn/topics/transactions.html">事务（transactions）</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html">磁盘持久化（persistence）</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html">Redis哨兵（Sentinel）</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html">分区（Cluster）</a>提供高可用性（high availability）。</p><h2 id="Redis-Key"><a href="#Redis-Key" class="headerlink" title="Redis-Key"></a>Redis-Key</h2><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> EXPIRE name 10    <span class="token comment" spellcheck="true">#设置key的过期时间，单位是秒</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> ttl name    <span class="token comment" spellcheck="true">#查看当前key的剩余时间</span>127.0.0.1:6379<span class="token operator">></span> TYPE name    <span class="token comment" spellcheck="true">#查看key的类型</span>string127.0.0.1:6379<span class="token operator">></span> MOVE name 1    <span class="token comment" spellcheck="true">#将key移动到指定数据库</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SELECT 1OK127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> get name<span class="token string">"lht"</span>127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> SELECT 0OK127.0.0.1:6379<span class="token operator">></span> get name<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> DEL name    <span class="token comment" spellcheck="true">#删除key</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> get name<span class="token punctuation">(</span>nil<span class="token punctuation">)</span></code></pre><h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h2><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> key1 v1    <span class="token comment" spellcheck="true">#设置key</span>OK    127.0.0.1:6379<span class="token operator">></span> get key1    <span class="token comment" spellcheck="true">#获取key</span><span class="token string">"v1"</span>127.0.0.1:6379<span class="token operator">></span> APPEND key1 hello    <span class="token comment" spellcheck="true">#添加内容</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 7127.0.0.1:6379<span class="token operator">></span> get key1<span class="token string">"v1hello"</span>127.0.0.1:6379<span class="token operator">></span> EXISTS key1    <span class="token comment" spellcheck="true">#判断是否存在key</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span>  strlen key1    <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 7127.0.0.1:6379<span class="token operator">></span> APPEND key1 world<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 12127.0.0.1:6379<span class="token operator">></span> STRLEN key1    <span class="token comment" spellcheck="true">#获取key的长度</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 12127.0.0.1:6379<span class="token operator">></span> APPEND name zhangsan    <span class="token comment" spellcheck="true">#如果key不存在，就相当于set</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 8127.0.0.1:6379<span class="token operator">></span> keys *1<span class="token punctuation">)</span> <span class="token string">"name"</span>2<span class="token punctuation">)</span> <span class="token string">"key1"</span><span class="token comment" spellcheck="true">##########################################</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> views 0    <span class="token comment" spellcheck="true">#设置初始浏览量为0</span>OK127.0.0.1:6379<span class="token operator">></span> INCR views    <span class="token comment" spellcheck="true">#自增1，浏览量加1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> get views    <span class="token string">"1"</span>127.0.0.1:6379<span class="token operator">></span> INCR views    <span class="token comment" spellcheck="true">#自减1，浏览量减1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> DECR views<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> INCRBY views 10    <span class="token comment" spellcheck="true">#设置步长自增</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 11127.0.0.1:6379<span class="token operator">></span> INCRBY views 10<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 21127.0.0.1:6379<span class="token operator">></span> DECRBY views 10    <span class="token comment" spellcheck="true">#设置步长自减</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 11127.0.0.1:6379<span class="token operator">></span> DECRBY views 10<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> DECRBY views 10<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -9<span class="token comment" spellcheck="true">########################################</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> name hello,world,redisOK127.0.0.1:6379<span class="token operator">></span> get name<span class="token string">"hello,world,redis"</span>127.0.0.1:6379<span class="token operator">></span> GETRANGE name 0 3    <span class="token comment" spellcheck="true">#截取字符串[0,3]</span><span class="token string">"hell"</span>127.0.0.1:6379<span class="token operator">></span> GETRANGE name 0 -1 <span class="token comment" spellcheck="true">#获取全部的字符串，和get一样</span><span class="token string">"hello,world,redis"</span><span class="token comment" spellcheck="true">#########################################</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> key2 abcdefgOK127.0.0.1:6379<span class="token operator">></span> SETRANGE key2 1 xx<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 7127.0.0.1:6379<span class="token operator">></span> get key2<span class="token string">"axxdefg"</span><span class="token comment" spellcheck="true">###########################################</span><span class="token comment" spellcheck="true">#setex (set with expire)    #    设置过期时间</span><span class="token comment" spellcheck="true">#setnx (set if not exist)    #    不存在再设置（再分布式锁中会常常使用！）</span>127.0.0.1:6379<span class="token operator">></span> SETEX key3 30 <span class="token string">"hello"</span>    <span class="token comment" spellcheck="true">#设置key330秒后过期</span>OK127.0.0.1:6379<span class="token operator">></span> ttl key3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 26127.0.0.1:6379<span class="token operator">></span> setnx mykey <span class="token string">"redis"</span>        <span class="token comment" spellcheck="true">#如果mykey不存在，创建mykey</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> ttl key3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> -2127.0.0.1:6379<span class="token operator">></span> SETNX mykey <span class="token string">"java"</span>        <span class="token comment" spellcheck="true">#如果mykey存在，创建失败</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> get mykey<span class="token string">"redis"</span><span class="token comment" spellcheck="true">#########################################</span>127.0.0.1:6379<span class="token operator">></span> MSET k1 v1 k2 v2 k3 v3        <span class="token comment" spellcheck="true">#同时设置多个值</span>OK127.0.0.1:6379<span class="token operator">></span> MGET k1 k2 k3                <span class="token comment" spellcheck="true">#同时获取多个值</span>1<span class="token punctuation">)</span> <span class="token string">"v1"</span>2<span class="token punctuation">)</span> <span class="token string">"v2"</span>3<span class="token punctuation">)</span> <span class="token string">"v3"</span>    127.0.0.1:6379<span class="token operator">></span> MSETNX k1 v1 k4 v4            <span class="token comment" spellcheck="true">#msetnx是一个原子性的操作，要么一起成功，要么一起失败</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0<span class="token comment" spellcheck="true">###########################################</span><span class="token comment" spellcheck="true">#对象        设置一个user:1独享，值为json字符来保存一个对象</span>127.0.0.1:6379<span class="token operator">></span> MSET user:1:name shangsan user:1:age 22OK127.0.0.1:6379<span class="token operator">></span> MGET user:1:name user:1:age1<span class="token punctuation">)</span> <span class="token string">"shangsan"</span>2<span class="token punctuation">)</span> <span class="token string">"22"</span><span class="token comment" spellcheck="true">##########################################</span><span class="token comment" spellcheck="true">#先get再set</span>127.0.0.1:6379<span class="token operator">></span> GETSET db redis        <span class="token comment" spellcheck="true">#如果不存在值，则返回nil</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> get db<span class="token string">"redis"</span>127.0.0.1:6379<span class="token operator">></span> GETSET db mysql        <span class="token comment" spellcheck="true">#如果存在值，获取原来的值，并设置新的值</span><span class="token string">"redis"</span>127.0.0.1:6379<span class="token operator">></span> get db<span class="token string">"mysql"</span></code></pre><p>String类似的使用场景：value除了是字符串，还可以是数字</p><ul><li>计数器</li><li>统计多单位的数量</li><li>粉丝数</li><li>对象存储缓存</li></ul><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>基本的数据类型，列表</p><p>在redis里面，list可以实现栈，队列，阻塞队列</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#####################################################################</span>127.0.0.1:6379<span class="token operator">></span> LPUSH list one        <span class="token comment" spellcheck="true"># 将一个值或多个值，插入列表的头部（左）</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> LPUSH list two    <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> LPUSH list three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 3        <span class="token comment" spellcheck="true"># 通过区间获取具体的值</span>1<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 1        1<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>127.0.0.1:6379<span class="token operator">></span> RPUSH list four        <span class="token comment" spellcheck="true"># 将一个或多个值，插入到列表的尾部（右）</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -1    <span class="token comment" spellcheck="true"># 获取list中的值</span>1<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>4<span class="token punctuation">)</span> <span class="token string">"four"</span><span class="token comment" spellcheck="true">#####################################################################</span>127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>4<span class="token punctuation">)</span> <span class="token string">"four"</span>127.0.0.1:6379<span class="token operator">></span> LPOP list        <span class="token comment" spellcheck="true"># 移除列表的第一个元素</span><span class="token string">"three"</span>127.0.0.1:6379<span class="token operator">></span> RPOP list        <span class="token comment" spellcheck="true"># 移除列表的最后一个元素</span><span class="token string">"four"</span><span class="token comment" spellcheck="true">#####################################################################</span>127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"two"</span>2<span class="token punctuation">)</span> <span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> LINDEX list 0        <span class="token comment" spellcheck="true">#通过下标获取list中的某一个值</span><span class="token string">"two"</span>127.0.0.1:6379<span class="token operator">></span> LINDEX list 1<span class="token string">"one"</span><span class="token comment" spellcheck="true">#####################################################################</span>127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"two"</span>2<span class="token punctuation">)</span> <span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> LLEN list        <span class="token comment" spellcheck="true"># 返回列表的长度</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2<span class="token comment" spellcheck="true">#####################################################################</span>移除指定的值127.0.0.1:6379<span class="token operator">></span> LPUSH list three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> LPUSH list three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"three"</span>3<span class="token punctuation">)</span> <span class="token string">"two"</span>4<span class="token punctuation">)</span> <span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> LREM list 1 one        <span class="token comment" spellcheck="true">#移除指定个数的值</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"three"</span>2<span class="token punctuation">)</span> <span class="token string">"three"</span>3<span class="token punctuation">)</span> <span class="token string">"two"</span>127.0.0.1:6379<span class="token operator">></span> LREM list 2 three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"two"</span><span class="token comment" spellcheck="true">#####################################################################</span>127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello1"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello2"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> RPUSH mylist <span class="token string">"hello3"</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> LTRIM mylist 1 2    <span class="token comment" spellcheck="true"># 通过下标截取指定的长度</span>OK127.0.0.1:6379<span class="token operator">></span> LRANGE mylist 0 -1    <span class="token comment" spellcheck="true"># 这个list已经被改变了，截断了只剩下截取的元素</span>1<span class="token punctuation">)</span> <span class="token string">"hello1"</span>2<span class="token punctuation">)</span> <span class="token string">"hello2"</span><span class="token comment" spellcheck="true">#####################################################################</span>移除列表的最后一个元素，将它移动到新的列表中127.0.0.1:6379<span class="token operator">></span> RPOPLPUSH mylist otherlist<span class="token string">"hello3"</span>127.0.0.1:6379<span class="token operator">></span> LRANGE mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"hello2"</span>127.0.0.1:6379<span class="token operator">></span> LRANGE otherlist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello3"</span><span class="token comment" spellcheck="true">#####################################################################</span>lset    <span class="token comment" spellcheck="true">#将列表中指定下标的值替换为另外一个值</span>127.0.0.1:6379<span class="token operator">></span> LSET list 0 item    <span class="token comment" spellcheck="true">#将列表中指定下标的值替换为另外一个值，如果不存在列表会报错</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR no such key127.0.0.1:6379<span class="token operator">></span> LPUSH list v1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"v1"</span>127.0.0.1:6379<span class="token operator">></span> LSET list 0 item    <span class="token comment" spellcheck="true">#如果存在会更新该下标的值</span>OK127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"item"</span>127.0.0.1:6379<span class="token operator">></span> LSET list 1 other    <span class="token comment" spellcheck="true">#如果下标不存在，会报错</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR index out of range<span class="token comment" spellcheck="true">#####################################################################</span>linsert        <span class="token comment" spellcheck="true">#将某个具体的value插入到列表中指定元素的前面或后面</span>127.0.0.1:6379<span class="token operator">></span> RPUSH list hello<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> RPUSH list world<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> LINSERT list before world other<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"other"</span>3<span class="token punctuation">)</span> <span class="token string">"world"</span>127.0.0.1:6379<span class="token operator">></span> LINSERT list after world java<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 4127.0.0.1:6379<span class="token operator">></span> LRANGE list 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"other"</span>3<span class="token punctuation">)</span> <span class="token string">"world"</span>4<span class="token punctuation">)</span> <span class="token string">"java"</span></code></pre><blockquote><p>小结</p></blockquote><ul><li>实际上是一个链表，before，after，left，right都可以插入元素</li><li>如果key不存在，创建新的链表</li><li>如果key存在，新增内容</li><li>如果移除了所有值，空链表，也代表不存在</li><li>在两边插入或者改动值下，效率最高，中间元素，相对效率会低一点</li></ul><p>消息队列（lpush，rpop），栈（lpush，rpush）</p><h2 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h2><p>set中的值是不能重复的</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#####################################################################</span>127.0.0.1:6379<span class="token operator">></span> SADD <span class="token keyword">set</span> hello        <span class="token comment" spellcheck="true">#set集合中添加元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD <span class="token keyword">set</span> world<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SADD <span class="token keyword">set</span> zhangsan<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SMEMBERS <span class="token keyword">set</span>        <span class="token comment" spellcheck="true">#查看指定set的所有值</span>1<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>2<span class="token punctuation">)</span> <span class="token string">"world"</span>3<span class="token punctuation">)</span> <span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> sismember <span class="token keyword">set</span> hello        <span class="token comment" spellcheck="true">#判断set是否包含某个元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sismember <span class="token keyword">set</span> java<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0<span class="token comment" spellcheck="true">#####################################################################</span>127.0.0.1:6379<span class="token operator">></span> scard <span class="token keyword">set</span>        <span class="token comment" spellcheck="true"># 返回集合中的元素个数</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3<span class="token comment" spellcheck="true">#####################################################################</span>127.0.0.1:6379<span class="token operator">></span> srem <span class="token keyword">set</span> hello        <span class="token comment" spellcheck="true"># 移除set集合中的指定元素</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> scard <span class="token keyword">set</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2127.0.0.1:6379<span class="token operator">></span> smembers <span class="token keyword">set</span>1<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>2<span class="token punctuation">)</span> <span class="token string">"world"</span><span class="token comment" spellcheck="true">#####################################################################</span>set是无序不重复集合mrandmember        127.0.0.1:6379<span class="token operator">></span> srandmember <span class="token keyword">set</span> 1        <span class="token comment" spellcheck="true">#随机获取一个元素</span>1<span class="token punctuation">)</span> <span class="token string">"world"</span>127.0.0.1:6379<span class="token operator">></span> srandmember <span class="token keyword">set</span> 11<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>127.0.0.1:6379<span class="token operator">></span> srandmember <span class="token keyword">set</span> 11<span class="token punctuation">)</span> <span class="token string">"mysql"</span>127.0.0.1:6379<span class="token operator">></span> srandmember <span class="token keyword">set</span> 11<span class="token punctuation">)</span> <span class="token string">"mysql"</span>127.0.0.1:6379<span class="token operator">></span> srandmember <span class="token keyword">set</span> 2        <span class="token comment" spellcheck="true">#随机获取2个元素</span>1<span class="token punctuation">)</span> <span class="token string">"world"</span>2<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>127.0.0.1:6379<span class="token operator">></span> srandmember <span class="token keyword">set</span> 21<span class="token punctuation">)</span> <span class="token string">"world"</span>2<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>127.0.0.1:6379<span class="token operator">></span> srandmember <span class="token keyword">set</span> 21<span class="token punctuation">)</span> <span class="token string">"world"</span>2<span class="token punctuation">)</span> <span class="token string">"mysql"</span><span class="token comment" spellcheck="true">#####################################################################</span>随机删除key127.0.0.1:6379<span class="token operator">></span> smembers <span class="token keyword">set</span>1<span class="token punctuation">)</span> <span class="token string">"mysql"</span>2<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>3<span class="token punctuation">)</span> <span class="token string">"world"</span>127.0.0.1:6379<span class="token operator">></span> spop <span class="token keyword">set</span><span class="token string">"world"</span>127.0.0.1:6379<span class="token operator">></span> spop <span class="token keyword">set</span><span class="token string">"mysql"</span><span class="token comment" spellcheck="true">#####################################################################</span>将一个指定的值，移动到零一个集合中127.0.0.1:6379<span class="token operator">></span> sadd set1 hello<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd set1 world<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd set1 java<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd set2 mysql<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> SMOVE set1 set2 java<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> smembers set11<span class="token punctuation">)</span> <span class="token string">"world"</span>2<span class="token punctuation">)</span> <span class="token string">"hello"</span>127.0.0.1:6379<span class="token operator">></span> smembers set21<span class="token punctuation">)</span> <span class="token string">"mysql"</span>2<span class="token punctuation">)</span> <span class="token string">"java"</span><span class="token comment" spellcheck="true">#####################################################################</span>交，并，差集127.0.0.1:6379<span class="token operator">></span> sadd set1 a<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd set1 b<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd set1 c<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd set2 c<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd set2 d<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> sadd set2 e<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> <span class="token function">sdiff</span> set1 set2        <span class="token comment" spellcheck="true">#差集</span>1<span class="token punctuation">)</span> <span class="token string">"b"</span>2<span class="token punctuation">)</span> <span class="token string">"a"</span>127.0.0.1:6379<span class="token operator">></span> sinter set1 set2    <span class="token comment" spellcheck="true">#交集</span>1<span class="token punctuation">)</span> <span class="token string">"c"</span>127.0.0.1:6379<span class="token operator">></span> sunion set1 set2    <span class="token comment" spellcheck="true">#并集</span>1<span class="token punctuation">)</span> <span class="token string">"e"</span>2<span class="token punctuation">)</span> <span class="token string">"c"</span>3<span class="token punctuation">)</span> <span class="token string">"a"</span>4<span class="token punctuation">)</span> <span class="token string">"b"</span>5<span class="token punctuation">)</span> <span class="token string">"d"</span></code></pre><p>微博，A用户将所有关注的人放在一个set集合！将它的粉丝也放在一个集合中</p><p>共同关注，共同爱好，二度好友，推荐好友（六度分割理论）</p><h2 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h2><p>Map集合，key-map，这个时候的值就是一个map集合！本质上和String类型没有太大区别，还是一个简单的key-value！</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#####################################################################</span>127.0.0.1:6379<span class="token operator">></span> HSET <span class="token function">hash</span> field1 zhangsan        <span class="token comment" spellcheck="true">#set一个具体的key-value</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> HGET <span class="token function">hash</span> field1                <span class="token comment" spellcheck="true"># 获取一个字段值</span><span class="token string">"zhangsan"</span>127.0.0.1:6379<span class="token operator">></span> HMSET <span class="token function">hash</span> field1 hello field2 world    <span class="token comment" spellcheck="true">#set多个key-value</span>OK127.0.0.1:6379<span class="token operator">></span> hmget <span class="token function">hash</span> field1 field2            <span class="token comment" spellcheck="true">#获取多个字段值</span>1<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"world"</span>127.0.0.1:6379<span class="token operator">></span> hgetall <span class="token function">hash</span>            <span class="token comment" spellcheck="true">#获取全部的数据</span>1<span class="token punctuation">)</span> <span class="token string">"field1"</span>2<span class="token punctuation">)</span> <span class="token string">"hello"</span>3<span class="token punctuation">)</span> <span class="token string">"field2"</span>4<span class="token punctuation">)</span> <span class="token string">"world"</span><span class="token comment" spellcheck="true">#####################################################################</span>127.0.0.1:6379<span class="token operator">></span> hdel <span class="token function">hash</span> field1        <span class="token comment" spellcheck="true">#删除hash中指定key字段，对应的value值也被删除</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> hgetall <span class="token function">hash</span>1<span class="token punctuation">)</span> <span class="token string">"field2"</span>2<span class="token punctuation">)</span> <span class="token string">"world"</span><span class="token comment" spellcheck="true">#####################################################################</span>127.0.0.1:6379<span class="token operator">></span> hlen <span class="token function">hash</span>        <span class="token comment" spellcheck="true">#获取hash的字段数量</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2<span class="token comment" spellcheck="true">#####################################################################</span>127.0.0.1:6379<span class="token operator">></span> hexists <span class="token function">hash</span> field1        <span class="token comment" spellcheck="true"># 判断hash中的指定字段是否存在</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> hexists <span class="token function">hash</span> field<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0<span class="token comment" spellcheck="true">#####################################################################</span><span class="token comment" spellcheck="true"># 只获取所有的key字段</span><span class="token comment" spellcheck="true"># 只获取所有的值</span>127.0.0.1:6379<span class="token operator">></span> hkeys <span class="token function">hash</span>1<span class="token punctuation">)</span> <span class="token string">"field2"</span>2<span class="token punctuation">)</span> <span class="token string">"field1"</span>127.0.0.1:6379<span class="token operator">></span> hvals <span class="token function">hash</span>1<span class="token punctuation">)</span> <span class="token string">"world"</span>2<span class="token punctuation">)</span> <span class="token string">"hello"</span><span class="token comment" spellcheck="true">#####################################################################</span>incr decr127.0.0.1:6379<span class="token operator">></span> hset <span class="token function">hash</span> field3 0        <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> HINCRBY <span class="token function">hash</span> field3 1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> HINCRBY <span class="token function">hash</span> field3 -1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> hsetnx <span class="token function">hash</span> field4 hello    <span class="token comment" spellcheck="true">#如果不存在，可以设置</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> hsetnx <span class="token function">hash</span> field4 java        <span class="token comment" spellcheck="true">#如果存在，不可以设置</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0</code></pre><p>hash变更的数据user，name，age，尤其是用户信息之类的，经常变动的信息，hash更适合对象的存储，String更适合字符串存储</p><h2 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h2><p>在set的基础上增加的一个值</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#####################################################################</span>127.0.0.1:6379<span class="token operator">></span> zadd myset 1 one<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zadd myset 2 two<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zadd myset 3 three<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> ZRANGE myset 0 -11<span class="token punctuation">)</span> <span class="token string">"one"</span>2<span class="token punctuation">)</span> <span class="token string">"two"</span>3<span class="token punctuation">)</span> <span class="token string">"three#####################################################################127.0.0.1:6379> zadd myset 1000 zhangsan(integer) 1127.0.0.1:6379> zadd myset 200 lisi(integer) 1127.0.0.1:6379> zadd myset 3000 wangwu(integer) 1127.0.0.1:6379> ZRANGE myset 0 -11) "</span>lisi<span class="token string">"2) "</span>zhangsan<span class="token string">"3) "</span>wangwu<span class="token string">"127.0.0.1:6379> ZRANGEBYSCORE myset -inf +inf withscores        #返回全部数据，按升序排列1) "</span>lisi<span class="token string">"2) "</span>200<span class="token string">"3) "</span>zhangsan<span class="token string">"4) "</span>1000<span class="token string">"5) "</span>wangwu<span class="token string">"6) "</span>3000<span class="token string">"127.0.0.1:6379> ZREVRANGEBYSCORE myset +inf -inf withscores        #返回所有数据，按降序排序1) "</span>wangwu<span class="token string">"2) "</span>3000<span class="token string">"3) "</span>zhangsan<span class="token string">"4) "</span>1000<span class="token string">"5) "</span>lisi<span class="token string">"6) "</span>200<span class="token string">"#####################################################################zrem，删除一个元素127.0.0.1:6379> ZRANGE myset 0 -11) "</span>lisi<span class="token string">"2) "</span>zhangsan<span class="token string">"3) "</span>wangwu<span class="token string">"127.0.0.1:6379> zrem myset lisi(integer) 1127.0.0.1:6379> ZRANGE myset 0 -11) "</span>zhangsan<span class="token string">"2) "</span>wangwu"<span class="token comment" spellcheck="true">#####################################################################</span>127.0.0.1:6379<span class="token operator">></span> zcard myset        <span class="token comment" spellcheck="true">#获取有序集合中的个数</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2<span class="token comment" spellcheck="true">#####################################################################</span>127.0.0.1:6379<span class="token operator">></span> zadd myset 2000 lisi<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> zcount myset 1000 2000        <span class="token comment" spellcheck="true">#获取指定区间的元素个数</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 2</code></pre><p>案例：set排序，存储班级成绩，薪资表排序</p><p>带权重进行判断，普通消息：1，重要消息：2</p><p>排行榜应用实现</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis(2):Redis入门</title>
      <link href="/2020/08227234.html"/>
      <url>/2020/08227234.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>Redis是什么？</p></blockquote><ul><li><p>Redis：<strong>RE</strong>mote  <strong>DI</strong>ctionary I <strong>S</strong>erver(远程字典服务器)</p></li><li><p>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p></li><li><p>免费和开源！是当下最热门的NoSQL技术之一！也被称为结构化数据库</p></li></ul><blockquote><p>Redis能干嘛？</p></blockquote><p>1、内存存储，持久化，内存中的数据是断电即失，持久化很重要（rdb，aof）</p><p>2、效率高，可以用于高速缓存</p><p>3、发布订阅系统</p><p>4、地图信息分析</p><p>5、计时器、计数器（浏览量！）</p><p>6、………..</p><blockquote><p>特性</p></blockquote><p>1、多样的数据类型</p><p>2、持久化</p><p>3、集群</p><p>4、事务</p><p>。。。。。。</p><h2 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h2><ul><li><p>下载压缩包</p></li><li><p>压缩</p></li><li><p>运行redis-server.exe开启redis，运行redis-cli.exe连接数据库</p></li></ul><h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><p>1、下载安装包</p><p>2、解压Redis的安装包！程序/opt</p><h2 id="基础的知识"><a href="#基础的知识" class="headerlink" title="基础的知识"></a>基础的知识</h2><p>共有16个数据库，默认使用的是第0个</p><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">select</span> 1    <span class="token comment" spellcheck="true">#切换数据库</span>OK127.0.0.1:6379<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">></span> DBSIZE    <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0</code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> KEYS *    <span class="token comment" spellcheck="true">#查看数据库所有的key</span>1<span class="token punctuation">)</span> <span class="token string">"name"</span></code></pre><pre class=" language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> FLUSHDB    <span class="token comment" spellcheck="true">#清空当前数据库</span>OK127.0.0.1:6379<span class="token operator">></span> KEYS *<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span>127.0.0.1:6379<span class="token operator">></span> FLUSHALL    <span class="token comment" spellcheck="true">#清空全部数据库</span>OK</code></pre><blockquote><p>Redis是单线程的</p></blockquote><p>官方答案：因为Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了。</p><blockquote><p>Redis为什么单线程还那么快？</p></blockquote><p>1、误区1：高性能的服务器一定是多线程的？</p><p>2、误区2：多线程（CPU上下文会切换！）一定比单线程效率高</p><p>核心：Redis是将所有的数据全部放在内存中的，所以说使用单线程去操作效率就是最高的，多线程（CPU上下文切换：耗时的操作），对于内存系统来说，如果没有上下文切换效率就是最高的！多次读写都是在一个CPU上的，在内存情况下，这个就是最佳的方案</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis(1):Nosql概述</title>
      <link href="/2020/082248783.html"/>
      <url>/2020/082248783.html</url>
      
        <content type="html"><![CDATA[<h1 id="Nosql概述"><a href="#Nosql概述" class="headerlink" title="Nosql概述"></a>Nosql概述</h1><h2 id="为什么要用Nosql"><a href="#为什么要用Nosql" class="headerlink" title="为什么要用Nosql"></a>为什么要用Nosql</h2><blockquote><p>1、单机mysql的年代</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vamFsbGVua3dvbmcvTGVhcm5SZWRpcy9yYXcvbWFzdGVyL2ltYWdlLzAxLnBuZw?x-oss-process=image/format,png"></p><p>90年代，一个基本的网站访问量一般不会太大，单个数据库完全足够！</p><p>那个时候，更多的去使用静态网页Html，服务器根本没有太大的压力！</p><p>这种情况下：整个网站的瓶颈是什么？</p><p>1、数据量如果太大，一个机器放不下！</p><p>2、数据的索引（B+Tree），一个机器内存也放不下！</p><p>3、访问量（读写混合），一个服务器承受不了</p><blockquote><p>2、Memcached(缓存)+MySQL+垂直拆分</p></blockquote><p>网站80%的情况都是在读，每次都要去查询数据库的话就十分的麻烦！所以说我们希望减轻数据的压力，我们可以使用缓存来保证效率！</p><p>发展过程：优化数据结构和索引 –》 文件缓存（IO） –》Memcached(当时最热门的技术！)</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vamFsbGVua3dvbmcvTGVhcm5SZWRpcy9yYXcvbWFzdGVyL2ltYWdlLzAyLnBuZw?x-oss-process=image/format,png"></p><blockquote><p>3、分库分表 + 水平拆分（集群）</p></blockquote><p>本质：数据库（读，写）</p><p>早些年MyISAM：表锁影响效率！高并发下就会出现严重的锁问题</p><p>转战Innodb：行锁</p><p>慢慢的就开始使用分库分表来解决写的压力</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vamFsbGVua3dvbmcvTGVhcm5SZWRpcy9yYXcvbWFzdGVyL2ltYWdlLzA0LnBuZw?x-oss-process=image/format,png"></p><blockquote><p>4、如今的年代</p></blockquote><p>2010-2020十年之间，世界已经发生了翻天覆地的变化：（定位，音乐，热榜也是一种数据）</p><p>MySQL等关系型数据库就不够用了！数据量很多，变化很快！</p><p>MySQL有时使用它来存储一些比较大的文件，博客，图片！数据库表很大，效率就低了！如果有一种数据库来专门处理这种数据，MySQL压力就变得十分小</p><blockquote><p>为什么要用NoSql</p></blockquote><p>用户的个人信息，社交网络，地理位置，用户生成的数据和用户操作日志已经成倍的增加。我们如果要对这些用户数据进行挖掘，那SQL数据库已经不适合这些应用了，NoSQL数据库的发展也却能很好的处理这些大的数据。</p><h2 id="什么是Nosql"><a href="#什么是Nosql" class="headerlink" title="什么是Nosql"></a>什么是Nosql</h2><blockquote><p>NoSQL</p></blockquote><p>NoSQL = Not Only SQL（不仅仅是SQL）</p><p>泛指非关系型数据库，随着web2.0互联网的诞生！传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区！暴露出来很多难以客服的问题，Nosql在当今大数据环境下发展的十分迅速，Redis是发展最快的，而且是我么们当下必须掌握的一个技术。</p><p>很多的数据类型，用户的个人信息，社交网络，地理位置，这些数据类型的存储不需要一个固定的格式！</p><blockquote><p>NoSQL特点</p></blockquote><p>1、方便扩展（数据之间没有关系，很好扩展）</p><p>2、大数据量高性能（Redis一秒可以写8万次，读取11万次NoSQL的缓存时记录级，是一种细粒度的缓存，性能会比较高！）</p><p>3、数据类型是多样型的！（不需要实现设计数据库！随取随用）</p><p>4、传统RDBMS和NoSQL</p><pre><code>传统的RDBMS    -结构化组织    -SQL    -数据和关系都存在单独的表中    -数据操作，数据定义语言    -严格的一致性    -基础的事务    -...</code></pre><pre><code>NOsql    -不仅仅是SQL    -没有固定的查询语言    -键值对存储，列存储，文档存储，图形数据库（社交关系）    -最终一致性    -CAP定理和BASE    -高性能、高可用、高可扩    -...</code></pre><blockquote><p>3V+3高</p></blockquote><ul><li><p>大数据时代的3V</p><ul><li>海量 Volume</li><li>多样 Variety</li><li>实时 Velocity</li></ul></li><li><p>互联网需求的3高</p><ul><li>高并发</li><li>高可扩（横向扩展）</li><li>高性能</li></ul></li></ul><h2 id="Nosql的四大分类"><a href="#Nosql的四大分类" class="headerlink" title="Nosql的四大分类"></a>Nosql的四大分类</h2><ul><li><p>KV键值对</p></li><li><p>文档型数据库（bson格式和json一样）</p><ul><li>MongoDB是一个基于分布式文件存储的数据库，C++编写，主要用来处理大量的文档</li><li>MongoDB是一个介于关系型数据库和非关系型数据库中间的的产品！MongoDB是非关系型数据库中功能最丰富，最像关系型数据库的！</li></ul></li><li><p>ConthDB</p></li><li><p>列存储</p><ul><li>HBase</li><li>分布式文件系统</li></ul></li><li><p>图关系数据库</p><ul><li>不是存图形，放的是关系，比如：社交网络，广告推荐系统</li><li>neo4j</li></ul></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vamFsbGVua3dvbmcvTGVhcm5SZWRpcy9yYXcvbWFzdGVyL2ltYWdlLzE5LnBuZw?x-oss-process=image/format,png"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用hexo和github搭建个人博客初体验</title>
      <link href="/2020/081359869.html"/>
      <url>/2020/081359869.html</url>
      
        <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li>node.js  </li><li>git和GitHub账号</li><li>hexo</li></ul><h1 id="教程推荐"><a href="#教程推荐" class="headerlink" title="教程推荐"></a>教程推荐</h1><p><a href="https://www.cnblogs.com/dantefung/p/d8c48ba8030bcab7cfc364d423186fee.html">hexo+github搭建个人博客</a>  </p><h1 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h1><p>matery主题优化个人博客<a href="https://blog.csdn.net/qq_43827595/article/details/104324443?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">hexo博客matery主题个性化配置</a>  </p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
