<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis学习笔记：Nosql入门和概述</title>
      <link href="/2020/081457373.html"/>
      <url>/2020/081457373.html</url>
      
        <content type="html"><![CDATA[<h1 id="NoSql入门和概述"><a href="#NoSql入门和概述" class="headerlink" title="NoSql入门和概述"></a>NoSql入门和概述</h1><h2 id="1-为什么会出现-用-NoSql"><a href="#1-为什么会出现-用-NoSql" class="headerlink" title="1.为什么会出现(用)NoSql"></a>1.为什么会出现(用)NoSql</h2><h3 id="1-单机MySQL的美好年代"><a href="#1-单机MySQL的美好年代" class="headerlink" title="1. 单机MySQL的美好年代"></a>1. 单机MySQL的美好年代</h3><p>在90年代，一个网站的访问量一般都不大，用单个数据库完全可以应付。，动态交互类型的网站不多</p><p><img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/01.png"></p><p>数据存储的瓶颈：</p><p>​        1.数据量的总大小，一个机器放不下</p><p>​        2.数据的索引一个机器的内存放不下</p><p>​        3.访问量（读写混合）一个实例不能d承受</p><h3 id="2-Memcached-缓存-MySQL-垂直拆分"><a href="#2-Memcached-缓存-MySQL-垂直拆分" class="headerlink" title="2.Memcached(缓存)+MySQL+垂直拆分"></a>2.Memcached(缓存)+MySQL+垂直拆分</h3><p>后来，随着访问量的上升，大部分使用MYSQL架构的网站在数据库上都开始出现了性能问题，web程序不再仅仅专注在功能上，同时也在追求性能。开始大量的使用缓存数据环节数据库的压力，优化数据库的结构和索引。Memcached成为一个非常时尚的技术产品。</p><p><img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/02.png"></p><h3 id="3-Mysql主从读写分离"><a href="#3-Mysql主从读写分离" class="headerlink" title="3.Mysql主从读写分离"></a>3.Mysql主从读写分离</h3><p>由于数据库的写入压力增加，Memcached 只能缓解数据库的读取压力。读写集中在一个数据库上让数据库不堪重负，大部分网站开始使用主从复制技术来达到读写分离，以提高读写性能和读库的可扩展性。Mysql的master-slave模 式成为这个时候的网站标配了。</p><p><img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/03.png"></p><h3 id="4-分表分库-水平拆分-mysql集群"><a href="#4-分表分库-水平拆分-mysql集群" class="headerlink" title="4.分表分库+水平拆分+mysql集群"></a>4.分表分库+水平拆分+mysql集群</h3><p>在Memcached的高速缓存，MySQL的主从复制， 读写分离的基础之上，这时MySQL主库的写压力开始出现瓶颈，而数据量的持续猛增，由于MyISAM使用表锁，在高并发下会出现严重的锁问题，大量的高并发MySQL应用开始使用InnoDB引擎代替MyISAM。</p><p>同时，开始流行使用分表分库来缓解写压力和数据增长的扩展问题。这个时候，分表分库成了一个热门技术，是面试的热门问题也是业界讨论的热门技术问题。也就在这个时候，MySQL推出了还不太稳定的表分区，这也给技术实力一般的公司带来了希望。虽然MySQL推出了MySQL Cluster集群，但性能也不能很好满足互联网的要求，只是在高可靠性上提供了非常大的保证。</p><p><img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/04.png"></p><h3 id="5-MySQL的扩展性瓶颈"><a href="#5-MySQL的扩展性瓶颈" class="headerlink" title="5.MySQL的扩展性瓶颈"></a>5.MySQL的扩展性瓶颈</h3><p>MySQL数据库也经常存储一些大文本字段，导致数据库表非常的大，在做数据库恢复的时候就导致非常的慢，不容易快速恢复数据库。比如1000万4KB大小的文本就接近40GB的大小， 如果能把这些数据从MySQL省去，MySQL将变得非常的小。关系数据库很强大，但是它并不能很好的应付所有的应用场景。MySQL的扩展性差(需要复杂的技术来实现)，大数据下IO压力大，表结构更改困难，正是当前使用MySOL的开发人员面临的问题。</p><h3 id="6-为什么使用NoSql"><a href="#6-为什么使用NoSql" class="headerlink" title="6.为什么使用NoSql"></a>6.为什么使用NoSql</h3><p>今天我们可以通过第三方平台( 如: Google，Facebook等) 可以很容易获取数据。用户的个人信息，社交网络，地理位置，用户生成的数据和用户操作日志已经成倍的增加。我们如果要对这些用户数据进行挖掘，那SQL数据库已经不适合这些应用了，NoSQL数据库的发展也却能很好的处理这些大的数据。</p><p><img src="https://gitee.com/jallenkwong/LearnRedis/raw/master/image/07.png"></p><h2 id="2-是什么"><a href="#2-是什么" class="headerlink" title="2. 是什么"></a>2. 是什么</h2><p>NoSQL(NoSQL = Not Only SQL)，意即“不仅仅是SQL”，<strong>泛指非关系型的数据库</strong>。随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL 数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题，包括超大规模数据的存储。</p><p>(例如谷歌或Facebook每天为他们的用户收集万亿比特的数据)。这些类型的数据存储不需要固定的模式，<strong>无需多余操作就可以横向扩展</strong>。</p><h2 id="3-特点"><a href="#3-特点" class="headerlink" title="3. 特点"></a>3. 特点</h2><ul><li>易扩展</li></ul><p>NoSQL数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。也无形之间，在架构的层面上带来了可扩展的能力。</p><ul><li>大数据量高性能</li></ul><p>NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀。这得益于它的无关系性，数据库的结构简单。一般MySQL使用Query Cache，每次表的更新Cache就失效，是一种大粒度的Cache，在针对web2.0的交互频繁的应用，Cache性能不高。而NoSQL的Cache是记录级的，是一种细粒度的Cache，所以NoSQL在这个层面上来说就要性能高很多了。</p><ul><li>多样灵活的数据模型</li></ul><p>NoSQL无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式。而在关系数据库里，增删字段是一件非常麻烦的事情。如果是非常大数据量的表，增加字段简直就是一个噩梦。</p><ul><li><p>传统RDBMS VS NOSQL</p><p>RDBMS</p><ul><li>高度组织化结构化数据</li><li>结构化查询语言（SQL）</li><li>数据和关系都存在单独的表中</li><li>数据操纵语言，数据定义语言</li><li>严格的一致性</li><li>基础事务</li></ul><p>NOSQL</p><ul><li>代表着不仅仅是SQL</li><li>没有声明性查询语言</li><li>没有预定义的模式</li><li>键-值对存储，列存储，文档存储，图形数据库</li><li>最终一致性，而非ACID属性</li><li>非结构化和不可预知的数据</li><li>CAP定理</li><li>高性能，高可用和高伸缩性</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用hexo和github搭建个人博客初体验</title>
      <link href="/2020/081359869.html"/>
      <url>/2020/081359869.html</url>
      
        <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li>node.js  </li><li>git和GitHub账号</li><li>hexo</li></ul><h1 id="教程推荐"><a href="#教程推荐" class="headerlink" title="教程推荐"></a>教程推荐</h1><p><a href="https://www.cnblogs.com/dantefung/p/d8c48ba8030bcab7cfc364d423186fee.html">hexo+github搭建个人博客</a>  </p><h1 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h1><p>matery主题优化个人博客<a href="https://blog.csdn.net/qq_43827595/article/details/104324443?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">hexo博客matery主题个性化配置</a>  </p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
